import pygame as py
import sys
import time
import random as rd
from GameResources import computer

py.init()

run_time = py.time.get_ticks()

# Set window + Title + Startup
screen_width = 1200
screen_height = 690
screen = py.display.set_mode((screen_width, screen_height))
py.display.set_caption("Rock - Paper - Scissors")
green = (73, 150, 32)

color_names = [
    'Default Green',
    "Green",
    'Sky Blue',
    'Red',
    'Yellow',
    'Orange',
    'White',
    'Black',
    'Light Green',
    'Purple',
]

current_bg_idx = 0

# Set Icon
icon = py.image.load("GameResources/icon.png")
py.display.set_icon(icon)
playing = True
high_score = 0
# MATERIALS

# HANDS
rock_hand_bot = py.image.load("GameResources/rock_hand.png")
rock_hand_plr = py.transform.flip(rock_hand_bot, True, False)

paper_hand_bot = py.image.load('GameResources/paper_hand.png')
paper_hand_plr = py.transform.flip(paper_hand_bot, True, False)

scissor_hand_bot = py.image.load('GameResources/scissor_hand.png')
scissor_hand_plr = py.transform.flip(scissor_hand_bot, True, False)

# BUTTON
rock_bt_img = py.image.load("GameResources/rock_button.png").convert_alpha()
paper_bt_img = py.image.load("GameResources/paper_button.png").convert_alpha()
scissor_bt_img = py.image.load("GameResources/scissor_button.png").convert_alpha()

# MODES:
easy_mode = py.image.load("GameResources/easy.png").convert_alpha()
hard_mode = py.image.load('GameResources/hard.png').convert_alpha()

easy_mode_rect = easy_mode.get_rect(center=(screen_width // 2 - 300, screen_height // 2))
hard_mode_rect = hard_mode.get_rect(center=(screen_width // 2 + 300, screen_height // 2))

# SCORE COUNTER
player_score = bot_score = 0
player_score_text = py.font.SysFont("Arial", 20)
player_score_render = player_score_text.render(f"Score: {str(player_score)}", True, (255, 255, 255))
bot_score_text = py.font.SysFont("Arial", 20)
bot_score_render = player_score_text.render(f"Score: {str(bot_score)}", True, (255, 255, 255))

state = 'MENU'
current_difficulty = 'None'
# TRANSPARENCY
rock_alpha = 140
paper_alpha = 140
scissor_alpha = 140
easy_alpha = 140
hard_alpha = 140
_alpha = 140
# INTERACT BOX
rock_interact_box = rock_bt_img.get_rect(topleft=(screen_width // 2.5, 550))
paper_interact_box = paper_bt_img.get_rect(topleft=(180, 550))
scissor_interact_box = scissor_bt_img.get_rect(topleft=(780, 550))

bot_choice = 'ROCK'
player_choice = 'ROCK'
hand_pos = [(0, 100), (600, 100)]
score_font = py.font.SysFont("Arial", 40)
before = 'none'
player_win_counts = bot_win_counts = 0
adapt_chance = 0
font = py.font.SysFont('TIMES NEW ROMAN', 20)

# Background Music:
bg_music = py.mixer.Sound('GameResources/nhacnen.mp3')
bg_music.play(-1)
bg_music.set_volume(.5)
alpha = 255

# Volume Button
current_volume = True
vol_on = py.image.load('GameResources/VolOn.png').convert_alpha()
vol_off = py.image.load('GameResources/VolOff.png').convert_alpha()
on_height = vol_on.get_height()
off_height = vol_off.get_height()
vol_on_rect = vol_on.get_rect(topleft=(0, screen_height - on_height))
vol_off_rect = vol_off.get_rect(topleft=(0, screen_height - off_height))

# Hover state for volume button
is_volume_hovered = False

# Hand Icons:
rock_icon = py.image.load('GameResources/icon_rock.png')
paper_icon = py.image.load("GameResources/icon_paper.png")
scissor_icon = py.image.load('GameResources/icon_scissor.png')

rock_icon_width, rock_icon_height = rock_icon.get_size()
rock_icon_position = (screen_width // 2 - rock_icon_width // 2, 550)
paper_icon_position = (950, 450)
scissor_icon_position = (150, 450)


def display_text():
    # Score Render
    global font, current_difficulty
    player_score_render = score_font.render(f"Player: {player_score}", True, colors[5])
    bot_score_render = score_font.render(f"Computer: {bot_score}", True, colors[5])
    plr_score_height = player_score_render.get_height()

    py.draw.rect(screen, colors[7], buttons[0])
    screen.blit(player_score_render, (x_position[0], y_position[0]))
    screen.blit(bot_score_render, (x_position[0], y_position[0] + plr_score_height))

    # Return button render
    return_font = py.font.SysFont("Times New Roman", 40)
    return_text_render = return_font.render('Return', True, colors[6])

    py.draw.rect(screen, colors[3], buttons[1])
    screen.blit(return_text_render, return_text_render.get_rect(center=buttons[1].center))

    # BG Color Changer
    color_names_render = font.render('Change color BG', True, colors[6])
    py.draw.rect(screen, colors[8], buttons[3])
    screen.blit(color_names_render, color_names_render.get_rect(center=buttons[3].center))
    draw_infobox()


def score_counter():
    global player_score, bot_score, player_choice, bot_choice, bot_win_counts, player_win_counts, state, high_score
    global adapt_chance
    # PLAYER WIN
    if player_choice == 'ROCK' and bot_choice == 'SCISSOR':
        player_score += 1
        if adapt_chance < 90 and current_difficulty == "ENDLESS":
            adapt_chance += rd.randint(1, 5)
    elif player_choice == 'PAPER' and bot_choice == 'ROCK':
        player_score += 1
        if adapt_chance < 90 and current_difficulty == "ENDLESS":
            adapt_chance += rd.randint(1, 5)
    elif player_choice == 'SCISSOR' and bot_choice == 'PAPER':
        player_score += 1
        if adapt_chance < 90 and current_difficulty == "ENDLESS":
            adapt_chance += rd.randint(1, 5)
    # BOT WIN
    if bot_choice == 'ROCK' and player_choice == 'SCISSOR':
        bot_score += 1
    elif bot_choice == 'PAPER' and player_choice == 'ROCK':
        bot_score += 1
    elif bot_choice == 'SCISSOR' and player_choice == 'PAPER':
        bot_score += 1
    print(f'ADAPTED: {adapt_chance}')
    print(f'Win Granted Chance: {adapt_chance * .7:.2f}%')
    # High Score
    if player_score > high_score:
        high_score = player_score
    if player_score > 2:
        state = 'END'
    elif bot_score > 2:
        state = 'END'


def play_animation(choice):
    global state, bot_choice, player_choice, adapt_chance

    y_hand = 100
    y_change = 2
    cnt = 0  # Animation time play

    while cnt < 3:
        y_hand += y_change
        if y_hand > 150:
            y_change = -3
            cnt += 1
        if y_hand < 100:
            y_change = 3
        screen.fill(colors[current_bg_idx])  # Screen refresh
        screen.blit(rock_hand_plr, (0, y_hand))
        screen.blit(rock_hand_bot, (600, y_hand))

        display_text()

        py.display.update()
    if current_difficulty == 'EASY':  # Easy Difficulty Logic
        picked = computer.pick(before)
        bot_choice = ['ROCK', 'PAPER', 'SCISSOR'][picked - 1]  # Markov
    elif current_difficulty == 'HARD':
        model_picker = rd.choice(['MARKOV', 'WIN INCREASE'])  # Pick Model
        print(model_picker)
        if model_picker == 'WIN INCREASE':  # Higher Win chance
            winning_moves = {
                'ROCK': 'PAPER',
                'PAPER': 'SCISSOR',
                'SCISSOR': 'ROCK',
            }
            losing_moves = {
                'ROCK': 'SCISSOR',
                'PAPER': 'ROCK',
                'SCISSOR': 'PAPER',
            }
            outcome = rd.choices(['WIN', 'TIE', 'LOSE'], weights=[0.7, 0.1, 0.2], k=1)[0]  # 70% W 10% Tie 20% L
            if outcome == 'WIN':
                bot_choice = winning_moves[choice]
            elif outcome == 'TIE':
                bot_choice = choice
            else:  # LOSE
                bot_choice = losing_moves[choice]
        elif model_picker == 'MARKOV':  # Markov model
            picked = computer.pick(before)
            bot_choice = ['ROCK', 'PAPER', 'SCISSOR'][picked - 1]
    elif current_difficulty == 'ENDLESS':
        model_picker = rd.choices(['MARKOV', 'WIN INCREASE'],
                                  weights=[1 - adapt_chance / 100, adapt_chance / 100], k=1)[0]
        print(adapt_chance)
        print(model_picker)
        if model_picker == 'WIN INCREASE':  # Higher Win chance
            winning_moves = {
                'ROCK': 'PAPER',
                'PAPER': 'SCISSOR',
                'SCISSOR': 'ROCK',
            }
            losing_moves = {
                'ROCK': 'SCISSOR',
                'PAPER': 'ROCK',
                'SCISSOR': 'PAPER',
            }
            outcome = rd.choices(['WIN', 'TIE', 'LOSE'], weights=[0.7, 0.1, 0.2], k=1)[0]  # 70% W 10% Tie 20% L
            if outcome == 'WIN':
                bot_choice = winning_moves[choice]
            elif outcome == 'TIE':
                bot_choice = choice
            else:  # LOSE
                bot_choice = losing_moves[choice]
        elif model_picker == 'MARKOV':
            picked = computer.pick(before)
            bot_choice = ['ROCK', 'PAPER', 'SCISSOR'][picked - 1]

    player_choice = choice
    score_counter()
    screen.fill(colors[current_bg_idx])  # Screen refresh
    # PLAYER CHOICE
    if player_choice == 'ROCK':
        screen.blit(rock_hand_plr, hand_pos[0])
    elif player_choice == 'PAPER':
        screen.blit(paper_hand_plr, hand_pos[0])
    elif player_choice == 'SCISSOR':
        screen.blit(scissor_hand_plr, hand_pos[0])

    # BOT CHOICE
    if bot_choice == 'ROCK':
        screen.blit(rock_hand_bot, hand_pos[1])
    elif bot_choice == 'PAPER':
        screen.blit(paper_hand_bot, hand_pos[1])
    elif bot_choice == 'SCISSOR':
        screen.blit(scissor_hand_bot, hand_pos[1])

    display_text()

    py.display.update()
    time.sleep(2)
    state = 'BASE'  # STATE RESET


buttons = [
    py.Rect(0, 0, 250, 100),  # Score Box [0]
    py.Rect(screen_width - 250 - 600, 0, 150, 50),  # Return Box [1]
    py.Rect(screen_width - 250, 0, 250, 135),  # Information Box [2]
    py.Rect(screen_width - 250 - 400, 0, 210, 50),  # BG Color Changer Box [3]
    py.Rect(screen_width // 2.45, screen_height // 2 + hard_mode.get_height(), 220, 70),  # Endless Mode Button [4]
    py.Rect(screen_width // 2 - 100, screen_height // 2, 200, 50),  # Replay Button - End [5]
    py.Rect(screen_width // 2 - 500, screen_height // 2 - 500, 500, 500),  # Guide GUI
]

colors = [
    green,  # Default Green
    (51, 255, 51),  # Green [1]
    (51, 255, 255),  # Sky blue [2]
    (255, 0, 0),  # Red [3]
    (255, 255, 0),  # Yellow [4]
    (255, 128, 0),  # Orange [5]
    (255, 255, 255),  # White [6]
    (0, 0, 0),  # Black [7]
    (102, 255, 102),  # Light Green [8]
    (153, 0, 153),  # Purple [9]
]

x_position = [
    buttons[0].x,  # X Score Box [0]
    buttons[1].x,  # X Return Box [1]
    buttons[2].x,  # X Information Box [2]
    buttons[3].x,  # X BG Color Changer Box [3]
    buttons[4].x,  # X Endless Mode [4]
    buttons[5].x,  # X Replay Button [5]
    buttons[6].x,  # X Guide GUI [6]
]

y_position = [
    buttons[0].y,  # Y Score Box [0]
    buttons[1].y,  # Y Return Box [1]
    buttons[2].y,  # Y Information Box [2]
    buttons[3].y,  # Y BG Color Changer Box [3]
    buttons[4].y,  # Y Endless Mode [4]
    buttons[5].y,  # Y Replay Button [5]
    buttons[6].y,  # Y Guide GUI [6]
]


def draw_menu():
    global font
    # Mode - Transparency
    easy_mode.set_alpha(easy_alpha)
    hard_mode.set_alpha(hard_alpha)

    # Mode
    screen.blit(easy_mode, easy_mode_rect)
    screen.blit(hard_mode, hard_mode_rect)
    py.draw.rect(screen, colors[3], buttons[4])

    # Endless Mode
    endless_text_font = py.font.SysFont('Times New Roman', 30)
    endless_text_render = endless_text_font.render('Endless Mode', True, colors[6])
    screen.blit(endless_text_render, endless_text_render.get_rect(center=buttons[4].center))
    choose_game_mode_font = py.font.SysFont('Aachen', 60)
    choose_game_mode_render = choose_game_mode_font.render('Choose Gamemodes', True, colors[6])
    game_mode_pos = (screen_width // 2 - choose_game_mode_render.get_width() // 2, screen_height // 2 - 150)
    screen.blit(choose_game_mode_render, game_mode_pos)

    # Icon Position:
    screen.blit(rock_icon, rock_icon_position)
    screen.blit(paper_icon, paper_icon_position)
    screen.blit(scissor_icon, scissor_icon_position)

    draw_infobox()


def end_state(bool_value):
    global current_difficulty
    win_font = py.font.SysFont('Aachen', 60)
    win_render = win_font.render('You Won!', True, colors[6])
    lose_render = win_font.render('You Lose!', True, colors[6])
    pos = (screen_width // 2 - win_render.get_width() // 2, screen_height // 2 - 150)  # Center the text
    current_difficulty = None
    # Screen Refresh
    screen.fill(colors[current_bg_idx])  # Screen refresh

    if bool_value:
        screen.blit(win_render, pos)
    else:
        screen.blit(lose_render, pos)

    # Replay Button
    return_font = py.font.SysFont("Arial", 45)
    return_text_render = return_font.render('Replay', True, colors[6])
    text_rect = return_text_render.get_rect(center=buttons[5].center)
    py.draw.rect(screen, colors[3], buttons[5])
    screen.blit(return_text_render, text_rect)

    # Information Box
    draw_infobox()

    # Draw Volume Button
    draw_volume()

    py.display.update()


def draw_infobox():
    # Information Box
    py.draw.rect(screen, colors[0], buttons[2])

    # Win Counts
    player_win_render = font.render(f'Player Wins: {player_win_counts}', True, colors[6])
    bot_win_render = font.render(f'Computer Wins: {bot_win_counts}', True, colors[6])
    plr_bot_text_height = player_win_render.get_height() + bot_win_render.get_height()

    screen.blit(player_win_render, (x_position[2], y_position[2]))
    screen.blit(bot_win_render, (x_position[2], y_position[2] + player_win_render.get_height()))

    # Run Time
    current_time = py.time.get_ticks()
    elapsed_time_ms = current_time - run_time
    elapsed_time_seconds = elapsed_time_ms / 1000
    run_time_render = font.render(f'Run Time: {elapsed_time_seconds:.2f}s', True, colors[6])

    screen.blit(run_time_render, (x_position[2], y_position[2] + plr_bot_text_height))

    # Highest Score
    plr_bot_txt_height_runtime = plr_bot_text_height + run_time_render.get_height()
    high_score_render = font.render(f'High Score: {high_score}', True, colors[6])
    screen.blit(high_score_render, (x_position[2], y_position[2] + plr_bot_txt_height_runtime))

    # Color Background
    color_names_render = font.render(f'BG Color: {color_names[current_bg_idx]}', True, colors[6])
    full_height = plr_bot_txt_height_runtime + color_names_render.get_height()
    screen.blit(color_names_render, (x_position[2], y_position[2] + full_height))

    # Current Difficulty
    current_difficulty_render = font.render(f'Difficulty: {current_difficulty}', True, colors[3])
    add_height = full_height + current_difficulty_render.get_height()
    screen.blit(current_difficulty_render, (x_position[2], y_position[2] + add_height))

    # Color Changer Button
    py.draw.rect(screen, colors[9], buttons[3])
    color_names_changer_text = font.render('Change BG Color', True, colors[7])
    text_rect = color_names_changer_text.get_rect(center=buttons[3].center)
    screen.blit(color_names_changer_text, text_rect)


def draw_volume():
    global mouse_pos, alpha, current_volume, is_volume_hovered
    # Check if mouse is hovering over volume button
    now_hovered = vol_on_rect.collidepoint(mouse_pos) or vol_off_rect.collidepoint(mouse_pos)

    # Update alpha only if hover state changes
    if now_hovered != is_volume_hovered:
        is_volume_hovered = now_hovered
        alpha = 180 if is_volume_hovered else 255

    # Apply transparency
    vol_on.set_alpha(alpha)
    vol_off.set_alpha(alpha)

    # Display Toggle Image
    if current_volume:
        screen.blit(vol_on, vol_on_rect)
    else:
        screen.blit(vol_off, vol_off_rect)


while playing:
    mouse_pos = py.mouse.get_pos()
    for event in py.event.get():
        # CLOSE
        if event.type == py.QUIT:
            playing = False
            py.quit()
            sys.exit()
        # MENU
        if state == 'MENU':
            if event.type == py.MOUSEBUTTONDOWN:
                if easy_mode_rect.collidepoint(mouse_pos):
                    current_difficulty = 'EASY'
                    state = 'BASE'
                elif hard_mode_rect.collidepoint(mouse_pos):
                    current_difficulty = 'HARD'
                    state = 'BASE'
                elif buttons[3].collidepoint(mouse_pos):
                    current_bg_idx = (current_bg_idx + 1) % len(colors)
                elif buttons[4].collidepoint(mouse_pos):
                    current_difficulty = 'ENDLESS'
                    state = 'BASE'
                elif vol_on_rect.collidepoint(mouse_pos) or vol_off_rect.collidepoint(mouse_pos):
                    current_volume = not current_volume
                    if current_volume:
                        bg_music.set_volume(0.5)
                    else:
                        bg_music.set_volume(0)
            if easy_mode_rect.collidepoint(mouse_pos):
                easy_alpha = 140
            elif hard_mode_rect.collidepoint(mouse_pos):
                hard_alpha = 140
            else:
                easy_alpha = hard_alpha = 255

            continue

        # BASE GAME LOGIC
        if state == 'BASE' or state == 'PLAY':
            if rock_interact_box.collidepoint(mouse_pos):
                rock_alpha = 140
                if event.type == py.MOUSEBUTTONDOWN:
                    player_choice = 'ROCK'
                    state = 'PLAY'
                    play_animation('ROCK')
                    before = 1
                    computer.add(before, player_choice)
            elif paper_interact_box.collidepoint(mouse_pos):
                paper_alpha = 140
                if event.type == py.MOUSEBUTTONDOWN:
                    player_choice = 'PAPER'
                    state = 'PLAY'
                    play_animation('PAPER')
                    before = 2
                    computer.add(before, player_choice)
            elif scissor_interact_box.collidepoint(mouse_pos):
                scissor_alpha = 140
                if event.type == py.MOUSEBUTTONDOWN:
                    player_choice = 'SCISSOR'
                    state = 'PLAY'
                    play_animation('SCISSOR')
                    before = 3
                    computer.add(before, player_choice)
            else:
                rock_alpha, paper_alpha, scissor_alpha = 255, 255, 255
            if event.type == py.MOUSEBUTTONDOWN:
                if buttons[1].collidepoint(mouse_pos):
                    state = 'MENU'
                    current_difficulty = 'None'
                    if bot_score < player_score and player_score - bot_score >= 5:
                        player_win_counts += 1
                    elif bot_score > player_score and bot_score - player_score >= 5:
                        bot_win_counts += 1
                    bot_score = 0
                    player_score = 0
                    adapt_chance = 0
                    computer.reset()
                if buttons[3].collidepoint(mouse_pos):
                    current_bg_idx = (current_bg_idx + 1) % len(colors)
                if vol_on_rect.collidepoint(mouse_pos) or vol_off_rect.collidepoint(mouse_pos):
                    current_volume = not current_volume
                    if current_volume:
                        bg_music.set_volume(0.5)
                    else:
                        bg_music.set_volume(0)
        # END STATE LOGIC
        if state == 'END':
            if event.type == py.MOUSEBUTTONDOWN:
                if buttons[5].collidepoint(mouse_pos):
                    state = 'MENU'
                    current_difficulty = 'None'
                    if bot_score < player_score:
                        player_win_counts += 1
                    elif bot_score > player_score:
                        bot_win_counts += 1
                    bot_score = 0
                    player_score = 0
                    adapt_chance = 0
                    computer.reset()
                if buttons[3].collidepoint(mouse_pos):
                    current_bg_idx = (current_bg_idx + 1) % len(colors)
                if vol_on_rect.collidepoint(mouse_pos) or vol_off_rect.collidepoint(mouse_pos):
                    current_volume = not current_volume
                    if current_volume:
                        bg_music.set_volume(0.5)
                    else:
                        bg_music.set_volume(0)
    screen.fill(colors[current_bg_idx])  # Screen refresh

    if state == 'MENU':
        draw_menu()
        draw_volume()
    elif state == 'BASE' or state == 'PLAY':
        if state == 'BASE':
            screen.blit(rock_hand_bot, hand_pos[1])
            screen.blit(rock_hand_plr, hand_pos[0])
        # Set Transparency
        rock_bt_img.set_alpha(rock_alpha)
        paper_bt_img.set_alpha(paper_alpha)
        scissor_bt_img.set_alpha(scissor_alpha)
        # Buttons
        screen.blit(rock_bt_img, rock_interact_box)
        screen.blit(paper_bt_img, paper_interact_box)
        screen.blit(scissor_bt_img, scissor_interact_box)
        display_text()
        draw_volume()
        if not current_difficulty == 'ENDLESS':
            if player_score >= 1:  # 20 to win
                state = 'END'
                end_state(True)
            elif bot_score >= 1:
                state = 'END'
                end_state(False)
    elif state == 'END':
        end_state(player_score > bot_score)
    py.display.update()
